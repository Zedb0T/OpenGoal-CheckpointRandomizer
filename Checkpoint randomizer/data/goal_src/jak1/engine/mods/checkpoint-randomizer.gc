;;-*-Lisp-*-
(in-package goal)

;; name: checkpoint-randomizer.gc
;; name in dgo: checkpoint-randomizer
;; dgos: GAME, ENGINE

(define *randomizer-version-string* "Rando 0.091")
(define *release-version-string* "Release 0.1.21")
(define *comment-string* "Rework cutscene skips")
(define *checkpoint-list* (the-as (array string) (new
                                             'static
                                             'boxed-array
                                             :type string :length 70 :allocated-length 70
"game-start"
"village1-hut"
"village1-warp"
"beach-start"
"beach-start"
"beach-start"
"beach-start"
"jungle-start"
"jungle-tower"
"jungle-start"
"jungle-tower"
"misty-start"
"misty-silo"
"misty-bike"
"misty-backside"
"misty-silo2"
"firecanyon-start"
"firecanyon-end"
"village2-start"
"village2-warp"
"village2-dock"
"sunken-start"
"sunken1"
"sunken2"
"sunken-tube1"
"sunkenb-start"
"sunkenb-helix"
"swamp-start"
"swamp-dock1"
"swamp-cave1"
"swamp-dock2"
"swamp-cave2"
"swamp-game"
"swamp-cave3"
"rolling-start"
"ogre-start"
"ogre-race"
"ogre-end"
"village3-start"
"village3-warp"
"village3-farside"
"snow-start"
"snow-fort"
"snow-flut-flut"
"snow-pass-to-fort"
"snow-by-ice-lake"
"snow-by-ice-lake-alt"
"snow-outside-fort"
"snow-outside-cave"
"snow-across-from-flut"
"maincave-start"
"maincave-to-darkcave"
"maincave-to-robocave"
"darkcave-start"
"robocave-start"
"robocave-bottom"
"lavatube-start"
"lavatube-middle"
"lavatube-after-ribbon"
"lavatube-end"
"citadel-start"
"citadel-entrance"
"citadel-warp"
"citadel-plat-start"
"citadel-plat-end"
"citadel-launch-start"
"citadel-launch-end"
"citadel-generator-start"
"citadel-generator-end"
"citadel-elevator"
)
)
)

;; collectable-interval serves as a counter, it counts up until it is raul to collectables-needed-to-warp, then it warps jak and resets itself to count again
(define *collectable-interval* 0.0)
(define racer? #f) 
(define flutflut? #f)
(define *randomizer-items-collected* 0)

(defun citadelCheck? ((checkpointName string))
(if 
(or
(string= checkpointName "citadel-start")
(string= checkpointName "citadel-entrance")
(string= checkpointName "citadel-warp")
(string= checkpointName "citadel-launch-start")
(string= checkpointName "citadel-launch-end")
(string= checkpointName "citadel-plat-start")
(string= checkpointName "citadel-plat-end")
(string= checkpointName "citadel-generator-start")
(string= checkpointName "citadel-generator-end")
(string= checkpointName "citadel-elevator")
)
(return #t)
(return #f)
)
#f
)

(defun randomizer-run-each-frame ()
;;update the number of items they have collected
   (set! *randomizer-items-collected*
   (+
      (if (-> *randomizer-settings* warp-on-cell?) (the int (-> *game-info* fuel)) 0)
      (if (-> *randomizer-settings* warp-on-orb?) (the int (-> *game-info* money-total)) 0)
      (if (-> *randomizer-settings* warp-on-buzzer?) (the int (-> *game-info* buzzer-total)) 0)
      )
   )

;;Randomzier stuff that needs to run constantly
(if (-> *randomizer-settings* checkpoint-randomizer?)
(begin

;;Skip the keira zoomer cutscenes if the player has 20 or more cells, or if they have collected the end cell.
(if (or (>= (-> *game-info* fuel) 20) (task-complete? *game-info* (game-task firecanyon-end)) )
(begin
  (close-specific-task! (game-task firecanyon-assistant) (task-status need-reward-speech))
))
(if (or (>= (-> *game-info* fuel) 20) (task-complete? *game-info* (game-task lavatube-end)) )
(begin
  (close-specific-task! (game-task lavatube-start) (task-status need-reward-speech))
))

;;Skip the samos cutscenes if the randomizer is on. Cutscenes bad.
(close-specific-task! (game-task intro) (task-status need-resolution))
(close-specific-task! (game-task beach-ecorocks) (task-status need-introduction))

;;Unlock citadel door if the randomizer is on. Invis wall is removed elsewhere (racer.gc). Softlocks bad.
(if (entity-by-name "citb-iris-door-21")
  ;; rather than trigger the warp gate switch at end of lava tube with:
  ;;    (close-specific-task! (game-task village4-button) (task-status need-hint))
  ;;
  ;; we break the link between the citadel door's state and the warp gate switch, 
  ;; and then manually open the door
  (let ((citb-iris-door-21 (the eco-door (-> (entity-by-name "citb-iris-door-21") extra process))))
    (set! (-> citb-iris-door-21 state-actor) #f)
    (set! (-> citb-iris-door-21 locked) #f) 
  )
)

;;Skip the citadel cutscenes if the randomizer is on. Cutscenes bad.

(close-specific-task! (game-task citadel-sage-green) (task-status need-resolution))
(close-specific-task! (game-task citadel-sage-yellow) (task-status need-resolution))
(close-specific-task! (game-task citadel-sage-red) (task-status need-resolution))
(close-specific-task! (game-task citadel-sage-blue) (task-status need-resolution))


(set! racer? (aif *target* (case (-> it next-state name) (
                                      ('target-racing
                                       'target-racing-bounce
                                       'target-racing-death
                                       'target-racing-falling
                                       'target-racing-grab
                                       'target-racing-hit
                                       'target-racing-jump
                                       'target-racing-smack
                                       'target-racing-start) #t))))
    (set! flutflut? (aif *target* (case (-> it next-state name) (
                                      ('target-flut-air-attack
                                       'target-flut-air-attack-hit-ground
                                       'target-flut-double-jump
                                       'target-flut-falling
                                       'target-flut-grab
                                       'target-flut-hit
                                       'target-flut-hit-ground
                                       'target-flut-jump
                                       'target-flut-running-attack
                                       'target-flut-stance
                                       'target-flut-start
                                       'target-flut-walk) #t))))

  (if (string= (symbol->string (-> (level-get-target-inside *level*) name)) "training")
(set! (-> *game-info* current-continue) (the-as continue-point (get-continue-by-name *game-info* "game-start")))
    (none)
  
  )

  ;;clean *stdcon*
  (clear *stdcon*)
  (if (> *randomizer-items-collected* 0)
    ;; Display the current seed
    (if (= *cheat-mode* 'debug)
      (format *stdcon* "SEED: ~D~%~S ~%~S ~%~S~%~%                                                                                                           "  (-> *randomizer-settings* current-seed) *randomizer-version-string* *release-version-string* *comment-string*)
      (format *stdcon* "SEED: ~D~%~S ~%~%                                                                                                           "  (-> *randomizer-settings* current-seed) *randomizer-version-string*)
    )
  )

  (when (-> *randomizer-settings* use-random-seed?)
      ;; burn through a random number every frame for improved randomness
      (knuth-rand-advance-seed)
  )
)
)
(none))


(define *rando-list-default-length* 3000)
(define *rando-checkpoint-list* (cons '() '()))
(define *next-rando-checkpoint-node* (cons '() '()))

(defun generateCheckpointList ((seed uint) (length int))
  ;; set the seed which will be used for generating checkpoint list
  (knuth-rand-init seed)

  (define currentListNode *rando-checkpoint-list*)

  (dotimes (temp length)
    (define tempCheckpointName (-> *checkpoint-list* (knuth-rand-nextIntRange 0 (-> *checkpoint-list* length))))
    (set! (car currentListNode) tempCheckpointName) ;; append checkpoint
    (set! (cdr currentListNode) (cons '() '())) ;; create next node
    (set! currentListNode (cdr currentListNode)) ;; move current to newly created node
  )

  (set! *next-rando-checkpoint-node* *rando-checkpoint-list*)
  (none)
)

(defun advanceCheckpointList ((n int))
  (define tempCount 0)
  (dotimes (tempCount n)
    (set! *next-rando-checkpoint-node* (cdr *next-rando-checkpoint-node*))

    ;; if we're at end of list, reset pointer to head of list
    (when (null? (car *next-rando-checkpoint-node*))
      (set! *next-rando-checkpoint-node* *rando-checkpoint-list*)
    )
  )
)

(defun warpToCheckpoint ((checkpointName string))
  ;; warps to checkpoint, assuming it is already safe to use
  (format 0 "RANDOMIZER: ...warping to ~A~%" checkpointName)
  (define checkpoint (get-continue-by-name *game-info* checkpointName))
  (set! (-> *game-info* current-continue) checkpoint)

  ;; trigger death to warp to checkpoint
  ;; this ensures init functions for new level run (misty boat, citadel elevator)
  (initialize! *game-info* 'die (the-as game-save #f) (the-as string #f))
  (none)
)

(defun checkpointValid? ((checkpointName string))
  ;; avoid citadel warps if cutscene task not closed
  (if 
    (and 
      (not (task-closed? (game-task citadel-sage-green) (task-status need-hint))) 
      (citadelCheck? checkpointName)
    )
    (return #f)
  )

  ;; avoid village1-warp if cutscene tasks not closed
  (if 
    (and 
      (or 
        (not (task-closed? (game-task intro) (task-status need-resolution))) 
        (not (task-closed? (game-task beach-ecorocks) (task-status need-introduction)))
      )
      (string= checkpointName "village1-warp")
    )
    (return #f)
  )
  #t
)

(defun getNextCheckpoint ()
  (define checkpointName (car *next-rando-checkpoint-node*))
  (set! *next-rando-checkpoint-node* (cdr *next-rando-checkpoint-node*))

  (while #t
    ;; if we're at end of list, reset pointer to head of list
    (when (null? (car *next-rando-checkpoint-node*))
      (set! *next-rando-checkpoint-node* *rando-checkpoint-list*)
    )
    ;; increment number of checkpoints used (intentionally includes any skipped citadel checkpoints)
    (+! (-> *randomizer-settings* backup-checkpoints-used) 1)

    (if (checkpointValid? (the-as string checkpointName))
      (begin 
        (format 0 "RANDOMIZER: checkpoint ~A is valid~%" checkpointName)
        (return checkpointName) ;; break from while loop
      )
      (begin
        (format 0 "RANDOMIZER: checkpoint ~A is NOT valid, will grab the next~%" checkpointName)
        (set! checkpointName (car *next-rando-checkpoint-node*))
        (set! *next-rando-checkpoint-node* (cdr *next-rando-checkpoint-node*))
      )
    )
  )
  ""
)

(defun peekNextCheckpoint ()
  (car *next-rando-checkpoint-node*)
)

(defun blacked-out? ()
  ;; if blackout-time is in the future, we're blacked out
  (< (current-time) (-> *game-info* blackout-time))
)

(defun orchestrateCheckpointWarp ()
  ;; first fuel cell/orb/buzzer? need to generate checkpoint list
  (when (= *randomizer-items-collected* 1)
    ;; randomly generate or set seed
    (if (-> *randomizer-settings* use-random-seed?)
      (set! (-> *randomizer-settings* current-seed) (knuth-rand-nextInt))
      (none)
    )
    ;; reset checkpoint counter backup
    (set! (-> *randomizer-settings* backup-checkpoints-used) 0)

    ;; generate checkpoint list from seed
    (generateCheckpointList (-> *randomizer-settings* current-seed) *rando-list-default-length*)
  )

  ;; in case of crash/closed window/etc, generate from last seed and advance checkpoints
  (when (null? (peekNextCheckpoint))
    (format 0 "Regenerating checkpoint list from backup, checkpoints used: ~D~%" (-> *randomizer-settings* backup-checkpoints-used))

    ;; generate checkpoint list from seed
    (generateCheckpointList (-> *randomizer-settings* current-seed) *rando-list-default-length*)
    (advanceCheckpointList (-> *randomizer-settings* backup-checkpoints-used))
  )

  (set! *collectable-interval* (+ *collectable-interval* 1))

  ;; if we're above the collectable threshold, then warp
  (when (>= *collectable-interval* (-> *randomizer-settings* collectables-needed-to-warp))
    ;; if blacked out we're already warping, so skip (i.e. to handle orb crate case)
    (if (not (blacked-out?))
      (begin
        (format 0 "RANDOMIZER: warping from ~A...~%" (-> *level* level 0 name))
        (warpToCheckpoint (the-as string (getNextCheckpoint)))
        (set! *collectable-interval* 0.0)
      )
      (begin
        (format 0 "RANDOMIZER: skipping warp as we're already blackout~%")
      )
    )
  )

  ;; current-seed and backup-checkpoints-used are updated at this point, commit to file in case of crash/closed window
  (commit-to-file *randomizer-settings*)
  (suspend)
)

(defun checkpointListTest ()
  ;; If we have random-seed on, update our current seed.
  (if (-> *randomizer-settings* use-random-seed?)
        (set! (-> *randomizer-settings* current-seed) (knuth-rand-nextInt))
      )
  ;; Generate a list of checkpoints based on our new updated current-seed
  (generateCheckpointList (-> *randomizer-settings* current-seed) *rando-list-default-length*)
  ;; Print this list of checkpoints to REPL for debugging purposes

  *rando-checkpoint-list*
)